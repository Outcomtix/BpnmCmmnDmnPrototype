{"version":3,"file":"ExpressionLanguage.js","names":["InputSelect","getBusinessObject","isInput","ExpressionLanguage","constructor","components","elementRegistry","modeling","expressionLanguages","translate","contextMenu","_modeling","_translate","_expressionLanguages","onGetComponent","context","contextMenuType","event","id","element","get","_shouldDisplayContextMenuEntry","openMenu","clickEvent","open","x","pageX","y","pageY","createVNode","expressionLanguage","_getElementExpressionLanguage","options","getAll","className","label","null","createComponentVNode","value","onChange","inputExpression","input","editExpressionLanguage","length","_getDefaultElementExpressionLanguage","getDefault","col","$inject"],"sources":["../../../src/features/expression-language/ExpressionLanguage.js"],"sourcesContent":["import InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\nimport {\r\n  getBusinessObject,\r\n  isInput\r\n} from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\n\r\nexport default class ExpressionLanguage {\r\n  constructor(\r\n      components, elementRegistry, modeling, expressionLanguages,\r\n      translate, contextMenu) {\r\n    this._modeling = modeling;\r\n    this._translate = translate;\r\n    this._expressionLanguages = expressionLanguages;\r\n\r\n    components.onGetComponent('context-menu-cell-additional', (context = {}) => {\r\n      if (context.contextMenuType && context.contextMenuType === 'context-menu') {\r\n\r\n        const {\r\n          event,\r\n          id\r\n        } = context;\r\n\r\n        if (!id) {\r\n          return;\r\n        }\r\n\r\n        const element = elementRegistry.get(id);\r\n\r\n        // element might not be in element registry (e.g. cut)\r\n        if (!element) {\r\n          return;\r\n        }\r\n\r\n        if (!this._shouldDisplayContextMenuEntry(element)) {\r\n          return;\r\n        }\r\n\r\n        const openMenu = clickEvent => {\r\n          contextMenu.open({\r\n            x: (event || clickEvent).pageX,\r\n            y: (event || clickEvent).pageY\r\n          }, {\r\n            contextMenuType: 'expression-language',\r\n            id\r\n          });\r\n        };\r\n\r\n        return (\r\n          <div\r\n            className=\"context-menu-group-entry\"\r\n            onClick={ openMenu }\r\n          >\r\n            { this._translate('Change cell expression language') }\r\n          </div>\r\n        );\r\n\r\n      }\r\n    });\r\n\r\n    components.onGetComponent('context-menu', (context = {}) => {\r\n      if (context.contextMenuType && context.contextMenuType === 'expression-language') {\r\n\r\n        const { id } = context;\r\n\r\n        if (!id) {\r\n          return;\r\n        }\r\n\r\n        const element = elementRegistry.get(id);\r\n\r\n        // element might not be in element registry (e.g. cut)\r\n        if (!element) {\r\n          return;\r\n        }\r\n\r\n        const expressionLanguage = this._getElementExpressionLanguage(element);\r\n\r\n        const options = expressionLanguages.getAll();\r\n\r\n        const className = 'context-menu-group-entry ' +\r\n          'context-menu-entry-set-expression-language';\r\n\r\n        const label = this._translate('Expression language');\r\n\r\n        return () => (\r\n          <div\r\n            className=\"context-menu-flex\">\r\n            <div className=\"context-menu-group\">\r\n              <div\r\n                className={ className }>\r\n                <div>\r\n                  { label }\r\n                </div>\r\n\r\n                <InputSelect\r\n                  label={ label }\r\n                  className=\"expression-language\"\r\n                  onChange={ value => this.onChange(element, value) }\r\n                  options={ options }\r\n                  value={ expressionLanguage } />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n    });\r\n\r\n    components.onGetComponent('context-menu', (context = {}) => {\r\n      if (\r\n        context.contextMenuType === 'input-edit'\r\n      ) {\r\n        return () => {\r\n          const { inputExpression } = context.input;\r\n\r\n          if (!this._shouldDisplayContextMenuEntry(inputExpression)) {\r\n            return;\r\n          }\r\n\r\n          const expressionLanguage = this._getElementExpressionLanguage(inputExpression);\r\n\r\n          const options = expressionLanguages.getAll();\r\n\r\n          const label = this._translate('Expression language');\r\n\r\n          return <div className=\"context-menu-container ref-language\">\r\n            <div className=\"dms-form-control\">\r\n              <label className=\"dms-label\">\r\n                {\r\n                  label\r\n                }\r\n              </label>\r\n\r\n              <InputSelect\r\n                label={ label }\r\n                className=\"ref-language\"\r\n                value={ expressionLanguage || '' }\r\n                onChange={ value => this.onChange(inputExpression, value) }\r\n                options={ options } />\r\n            </div>\r\n          </div>;\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  onChange(element, expressionLanguage) {\r\n    this._modeling.editExpressionLanguage(element, expressionLanguage);\r\n  }\r\n\r\n  _shouldDisplayContextMenuEntry(element) {\r\n    const expressionLanguages = this._expressionLanguages.getAll();\r\n\r\n    if (expressionLanguages.length > 1) {\r\n      return true;\r\n    }\r\n\r\n    const expressionLanguage = this._getElementExpressionLanguage(element);\r\n\r\n    return expressionLanguage !== this._getDefaultElementExpressionLanguage(element);\r\n  }\r\n\r\n  _getElementExpressionLanguage(element) {\r\n    return getBusinessObject(element).expressionLanguage\r\n    || this._getDefaultElementExpressionLanguage(element);\r\n  }\r\n\r\n  _getDefaultElementExpressionLanguage(element) {\r\n    return this._expressionLanguages.getDefault(\r\n      isInput(element.col) ? 'inputCell' : 'outputCell').value;\r\n  }\r\n}\r\n\r\nExpressionLanguage.$inject = [\r\n  'components',\r\n  'elementRegistry',\r\n  'modeling',\r\n  'expressionLanguages',\r\n  'translate',\r\n  'contextMenu'\r\n];\r\n"],"mappings":"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","ignoreList":[]}