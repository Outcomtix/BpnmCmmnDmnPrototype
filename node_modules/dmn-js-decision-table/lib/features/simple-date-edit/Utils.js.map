{"version":3,"file":"Utils.js","names":["ISO_DATE_REGEX","BETWEEN_DATE_REGEX","BEFORE_AFTER_DATE_REGEX","EXACT_DATE_REGEX","EXACT","BEFORE","AFTER","BETWEEN","validateISOString","string","test","trim","getDateString","type","dates","getSampleDate","date","Date","setUTCHours","toISOString","slice","parseString","matches","match"],"sources":["../../../src/features/simple-date-edit/Utils.js"],"sourcesContent":["const ISO_DATE_REGEX = /^\\d{4}(?:-\\d\\d){2}$/;\r\n\r\n\r\nconst BETWEEN_DATE_REGEX = /^\\[date\\(\"([^\"]*)\"\\)..date\\(\"([^\"]*)\"\\)\\]$/;\r\n\r\n\r\nconst BEFORE_AFTER_DATE_REGEX = /^(<|>)\\s*date\\(\"([^\"]*)\"\\)$/;\r\n\r\nconst EXACT_DATE_REGEX = /^date\\(\"([^\"]*)\"\\)$/;\r\n\r\nconst EXACT = 'exact',\r\n      BEFORE = 'before',\r\n      AFTER = 'after',\r\n      BETWEEN = 'between';\r\n\r\nexport function validateISOString(string) {\r\n  if (!ISO_DATE_REGEX.test(string.trim())) {\r\n    return 'Date must match pattern yyyy-MM-dd';\r\n  }\r\n}\r\n\r\nexport function getDateString(type, dates) {\r\n  if (type === EXACT) {\r\n    return `date(\"${ dates[0] }\")`;\r\n  } else if (type === BEFORE) {\r\n    return `< date(\"${ dates[0] }\")`;\r\n  } else if (type === AFTER) {\r\n    return `> date(\"${ dates[0] }\")`;\r\n  } else if (type === BETWEEN) {\r\n    return `[date(\"${ dates[0] }\")..date(\"${ dates[1] }\")]`;\r\n  }\r\n}\r\n\r\nexport function getSampleDate() {\r\n  const date = new Date();\r\n\r\n  date.setUTCHours(0, 0, 0, 0);\r\n\r\n  return date.toISOString().slice(0, 10);\r\n}\r\n\r\nexport function parseString(string) {\r\n\r\n  // emtpy\r\n  if (!string || string.trim() === '') {\r\n    return {\r\n      type: 'exact',\r\n      date: ''\r\n    };\r\n  }\r\n\r\n  // between\r\n  let matches = string.match(BETWEEN_DATE_REGEX);\r\n\r\n  if (matches) {\r\n    return {\r\n      type: 'between',\r\n      dates: [ matches[1], matches[2] ]\r\n    };\r\n  }\r\n\r\n  // before or after\r\n  matches = string.match(BEFORE_AFTER_DATE_REGEX);\r\n\r\n  if (matches) {\r\n    return {\r\n      type: matches[1] === '<' ? 'before' : 'after',\r\n      date: matches[2]\r\n    };\r\n  }\r\n\r\n  // exact\r\n  matches = string.match(EXACT_DATE_REGEX);\r\n\r\n  if (matches) {\r\n    return {\r\n      type: 'exact',\r\n      date: matches[1]\r\n    };\r\n  }\r\n}"],"mappings":"AAAA,MAAMA,cAAc,GAAG,qBAAqB;AAG5C,MAAMC,kBAAkB,GAAG,4CAA4C;AAGvE,MAAMC,uBAAuB,GAAG,6BAA6B;AAE7D,MAAMC,gBAAgB,GAAG,qBAAqB;AAE9C,MAAMC,KAAK,GAAG,OAAO;EACfC,MAAM,GAAG,QAAQ;EACjBC,KAAK,GAAG,OAAO;EACfC,OAAO,GAAG,SAAS;AAEzB,OAAO,SAASC,iBAAiBA,CAACC,MAAM,EAAE;EACxC,IAAI,CAACT,cAAc,CAACU,IAAI,CAACD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,EAAE;IACvC,OAAO,oCAAoC;EAC7C;AACF;AAEA,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACzC,IAAID,IAAI,KAAKT,KAAK,EAAE;IAClB,OAAO,SAAUU,KAAK,CAAC,CAAC,CAAC,IAAK;EAChC,CAAC,MAAM,IAAID,IAAI,KAAKR,MAAM,EAAE;IAC1B,OAAO,WAAYS,KAAK,CAAC,CAAC,CAAC,IAAK;EAClC,CAAC,MAAM,IAAID,IAAI,KAAKP,KAAK,EAAE;IACzB,OAAO,WAAYQ,KAAK,CAAC,CAAC,CAAC,IAAK;EAClC,CAAC,MAAM,IAAID,IAAI,KAAKN,OAAO,EAAE;IAC3B,OAAO,UAAWO,KAAK,CAAC,CAAC,CAAC,aAAeA,KAAK,CAAC,CAAC,CAAC,KAAM;EACzD;AACF;AAEA,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EAEvBD,IAAI,CAACE,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAE5B,OAAOF,IAAI,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AACxC;AAEA,OAAO,SAASC,WAAWA,CAACZ,MAAM,EAAE;EAElC;EACA,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACnC,OAAO;MACLE,IAAI,EAAE,OAAO;MACbG,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA,IAAIM,OAAO,GAAGb,MAAM,CAACc,KAAK,CAACtB,kBAAkB,CAAC;EAE9C,IAAIqB,OAAO,EAAE;IACX,OAAO;MACLT,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,CAAEQ,OAAO,CAAC,CAAC,CAAC,EAAEA,OAAO,CAAC,CAAC,CAAC;IACjC,CAAC;EACH;;EAEA;EACAA,OAAO,GAAGb,MAAM,CAACc,KAAK,CAACrB,uBAAuB,CAAC;EAE/C,IAAIoB,OAAO,EAAE;IACX,OAAO;MACLT,IAAI,EAAES,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,QAAQ,GAAG,OAAO;MAC7CN,IAAI,EAAEM,OAAO,CAAC,CAAC;IACjB,CAAC;EACH;;EAEA;EACAA,OAAO,GAAGb,MAAM,CAACc,KAAK,CAACpB,gBAAgB,CAAC;EAExC,IAAImB,OAAO,EAAE;IACX,OAAO;MACLT,IAAI,EAAE,OAAO;MACbG,IAAI,EAAEM,OAAO,CAAC,CAAC;IACjB,CAAC;EACH;AACF","ignoreList":[]}