{"version":3,"file":"Utils.js","names":["ISO_TIME_REGEX","BETWEEN_TIME_REGEX","BEFORE_AFTER_TIME_REGEX","EXACT_TIME_REGEX","EXACT","BEFORE","AFTER","BETWEEN","validateISOString","string","test","trim","getTimeString","type","times","getSampleTime","time","Date","toISOString","slice","parseString","matches","match"],"sources":["../../../src/features/simple-time-edit/Utils.js"],"sourcesContent":["const ISO_TIME_REGEX = /^(?:\\d\\d:){2}\\d\\d(?:Z|(?:[@+-][^\")]+))?$/;\n\nconst BETWEEN_TIME_REGEX = /^\\[time\\(\"([^\"]*)\"\\)..time\\(\"([^\"]*)\"\\)\\]$/;\n\nconst BEFORE_AFTER_TIME_REGEX = /^(<|>)\\s*time\\(\"([^\"]*)\"\\)$/;\n\nconst EXACT_TIME_REGEX = /^time\\(\"([^\"]*)\"\\)$/;\n\nconst EXACT = 'exact',\n      BEFORE = 'before',\n      AFTER = 'after',\n      BETWEEN = 'between';\n\nexport function validateISOString(string) {\n  if (!ISO_TIME_REGEX.test(string.trim())) {\n    return 'Time must match pattern hh:mm:ss[time zone]';\n  }\n}\n\nexport function getTimeString(type, times) {\n  if (type === EXACT) {\n    return `time(\"${ times[0] }\")`;\n  } else if (type === BEFORE) {\n    return `< time(\"${ times[0] }\")`;\n  } else if (type === AFTER) {\n    return `> time(\"${ times[0] }\")`;\n  } else if (type === BETWEEN) {\n    return `[time(\"${ times[0] }\")..time(\"${ times[1] }\")]`;\n  }\n}\n\nexport function getSampleTime() {\n  const time = new Date();\n\n  return time.toISOString().slice(11, -5) + 'Z';\n}\n\nexport function parseString(string) {\n\n  // emtpy\n  if (!string || string.trim() === '') {\n    return {\n      type: 'exact',\n      time: ''\n    };\n  }\n\n  // between\n  let matches = string.match(BETWEEN_TIME_REGEX);\n\n  if (matches) {\n    return {\n      type: 'between',\n      times: [ matches[1], matches[2] ]\n    };\n  }\n\n  // before or after\n  matches = string.match(BEFORE_AFTER_TIME_REGEX);\n\n  if (matches) {\n    return {\n      type: matches[1] === '<' ? 'before' : 'after',\n      time: matches[2]\n    };\n  }\n\n  // exact\n  matches = string.match(EXACT_TIME_REGEX);\n\n  if (matches) {\n    return {\n      type: 'exact',\n      time: matches[1]\n    };\n  }\n}"],"mappings":"AAAA,MAAMA,cAAc,GAAG,0CAA0C;AAEjE,MAAMC,kBAAkB,GAAG,4CAA4C;AAEvE,MAAMC,uBAAuB,GAAG,6BAA6B;AAE7D,MAAMC,gBAAgB,GAAG,qBAAqB;AAE9C,MAAMC,KAAK,GAAG,OAAO;EACfC,MAAM,GAAG,QAAQ;EACjBC,KAAK,GAAG,OAAO;EACfC,OAAO,GAAG,SAAS;AAEzB,OAAO,SAASC,iBAAiBA,CAACC,MAAM,EAAE;EACxC,IAAI,CAACT,cAAc,CAACU,IAAI,CAACD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,EAAE;IACvC,OAAO,6CAA6C;EACtD;AACF;AAEA,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACzC,IAAID,IAAI,KAAKT,KAAK,EAAE;IAClB,OAAO,SAAUU,KAAK,CAAC,CAAC,CAAC,IAAK;EAChC,CAAC,MAAM,IAAID,IAAI,KAAKR,MAAM,EAAE;IAC1B,OAAO,WAAYS,KAAK,CAAC,CAAC,CAAC,IAAK;EAClC,CAAC,MAAM,IAAID,IAAI,KAAKP,KAAK,EAAE;IACzB,OAAO,WAAYQ,KAAK,CAAC,CAAC,CAAC,IAAK;EAClC,CAAC,MAAM,IAAID,IAAI,KAAKN,OAAO,EAAE;IAC3B,OAAO,UAAWO,KAAK,CAAC,CAAC,CAAC,aAAeA,KAAK,CAAC,CAAC,CAAC,KAAM;EACzD;AACF;AAEA,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EAEvB,OAAOD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG;AAC/C;AAEA,OAAO,SAASC,WAAWA,CAACX,MAAM,EAAE;EAElC;EACA,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACnC,OAAO;MACLE,IAAI,EAAE,OAAO;MACbG,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA,IAAIK,OAAO,GAAGZ,MAAM,CAACa,KAAK,CAACrB,kBAAkB,CAAC;EAE9C,IAAIoB,OAAO,EAAE;IACX,OAAO;MACLR,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,CAAEO,OAAO,CAAC,CAAC,CAAC,EAAEA,OAAO,CAAC,CAAC,CAAC;IACjC,CAAC;EACH;;EAEA;EACAA,OAAO,GAAGZ,MAAM,CAACa,KAAK,CAACpB,uBAAuB,CAAC;EAE/C,IAAImB,OAAO,EAAE;IACX,OAAO;MACLR,IAAI,EAAEQ,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,QAAQ,GAAG,OAAO;MAC7CL,IAAI,EAAEK,OAAO,CAAC,CAAC;IACjB,CAAC;EACH;;EAEA;EACAA,OAAO,GAAGZ,MAAM,CAACa,KAAK,CAACnB,gBAAgB,CAAC;EAExC,IAAIkB,OAAO,EAAE;IACX,OAAO;MACLR,IAAI,EAAE,OAAO;MACbG,IAAI,EAAEK,OAAO,CAAC,CAAC;IACjB,CAAC;EACH;AACF","ignoreList":[]}