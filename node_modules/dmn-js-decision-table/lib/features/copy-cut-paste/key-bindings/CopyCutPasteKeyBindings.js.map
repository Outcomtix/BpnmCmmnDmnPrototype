{"version":3,"file":"CopyCutPasteKeyBindings.js","names":["getRange","event","domEvent","getFocusableNode","getNodeById","isCmd","isShift","CopyPasteKeyBindings","constructor","injector","eventBus","clipboard","cellSelection","elementRegistry","editorActions","renderer","_clipboard","_cellSelection","_elementRegistry","_editorActions","_keyboard","get","_renderer","on","_registerBindings","bind","document","_clearClipboard","unbind","clear","_getSelectedCell","elementId","getCellSelection","cell","container","getContainer","node","focusableNode","activeElement","range","start","end","copy","key","modifiers","trigger","element","col","row","cut","paste","pasted","selectCell","forEach","l","addListener","$inject"],"sources":["../../../../src/features/copy-cut-paste/key-bindings/CopyCutPasteKeyBindings.js"],"sourcesContent":["import {\n  getRange\n} from 'selection-ranges';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  getFocusableNode,\n  getNodeById\n} from '../../cell-selection/CellSelectionUtil';\n\nimport {\n  isCmd,\n  isShift\n} from '../../keyboard/KeyboardUtil';\n\n\n/**\n * Keybindings for Copy + Paste\n */\nexport default class CopyPasteKeyBindings {\n\n  constructor(\n      injector, eventBus, clipboard,\n      cellSelection, elementRegistry, editorActions,\n      renderer) {\n\n    this._clipboard = clipboard;\n    this._cellSelection = cellSelection;\n    this._elementRegistry = elementRegistry;\n    this._editorActions = editorActions;\n    this._keyboard = injector.get('keyboard', false);\n    this._renderer = renderer;\n\n    if (!this._keyboard) {\n      return;\n    }\n\n    eventBus.on('keyboard.init', this._registerBindings);\n\n    eventBus.on('keyboard.bind', () => {\n      domEvent.bind(document, 'copy', this._clearClipboard, true);\n      domEvent.bind(document, 'cut', this._clearClipboard, true);\n    });\n\n    eventBus.on('keyboard.unbind', () => {\n      domEvent.unbind(document, 'copy', this._clearClipboard, true);\n      domEvent.unbind(document, 'cut', this._clearClipboard, true);\n    });\n  }\n\n  _clearClipboard = () => {\n    this._clipboard.clear();\n  };\n\n  /**\n   * Return the selected cell within the decision table.\n   *\n   * This verifies that a cell ready for copy-or-paste is\n   * actual selected by the user, in the Browser UI.\n   *\n   * @return {Cell}\n   */\n  _getSelectedCell() {\n\n    const elementId = this._cellSelection.getCellSelection();\n\n    // we may have no selection\n    if (!elementId) {\n      return;\n    }\n\n    const cell = this._elementRegistry.get(elementId);\n\n    // selection may not be a cell\n    if (!cell) {\n      return;\n    }\n\n    const container = this._renderer.getContainer();\n\n    const node = getNodeById(elementId, container);\n\n    const focusableNode = getFocusableNode(node);\n\n    // focusable element in selection may not be actual\n    // browser focus, i.e. when a menu is open\n    if (document.activeElement !== focusableNode) {\n      return;\n    }\n\n    const range = getRange(node);\n\n    // user may attempt native copy-paste operation right now\n    // don't interfere with normal text copying\n    if (range && (range.start !== range.end)) {\n      return;\n    }\n\n    return cell;\n  }\n\n\n  _registerBindings = () => {\n\n    // copy\n    // CTRL/CMD + C\n    const copy = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 67)) {\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('copy', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('copy', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // cut\n    // CTRL/CMD + X\n    const cut = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 88)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('cut', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('cut', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // paste\n    // CTRL/CMD + V\n    const paste = (key, modifiers) => {\n\n      let pasted;\n\n      if (isCmd(modifiers) && (key === 86)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.col\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('right');\n          }\n        } else {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.row\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('below');\n          }\n        }\n      }\n\n      // indicate, whether we could paste\n      return typeof pasted !== 'undefined';\n    };\n\n    // register listeners\n    [ copy, cut, paste ].forEach((l) => {\n      this._keyboard.addListener(l);\n    });\n  };\n\n}\n\n\nCopyPasteKeyBindings.$inject = [\n  'injector',\n  'eventBus',\n  'clipboard',\n  'cellSelection',\n  'elementRegistry',\n  'editorActions',\n  'renderer'\n];"],"mappings":"AAAA,SACEA,QAAQ,QACH,kBAAkB;AAEzB,SACEC,KAAK,IAAIC,QAAQ,QACZ,SAAS;AAEhB,SACEC,gBAAgB,EAChBC,WAAW,QACN,wCAAwC;AAE/C,SACEC,KAAK,EACLC,OAAO,QACF,6BAA6B;;AAGpC;AACA;AACA;AACA,eAAe,MAAMC,oBAAoB,CAAC;EAExCC,WAAWA,CACPC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAC7BC,aAAa,EAAEC,eAAe,EAAEC,aAAa,EAC7CC,QAAQ,EAAE;IAEZ,IAAI,CAACC,UAAU,GAAGL,SAAS;IAC3B,IAAI,CAACM,cAAc,GAAGL,aAAa;IACnC,IAAI,CAACM,gBAAgB,GAAGL,eAAe;IACvC,IAAI,CAACM,cAAc,GAAGL,aAAa;IACnC,IAAI,CAACM,SAAS,GAAGX,QAAQ,CAACY,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;IAChD,IAAI,CAACC,SAAS,GAAGP,QAAQ;IAEzB,IAAI,CAAC,IAAI,CAACK,SAAS,EAAE;MACnB;IACF;IAEAV,QAAQ,CAACa,EAAE,CAAC,eAAe,EAAE,IAAI,CAACC,iBAAiB,CAAC;IAEpDd,QAAQ,CAACa,EAAE,CAAC,eAAe,EAAE,MAAM;MACjCrB,QAAQ,CAACuB,IAAI,CAACC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;MAC3DzB,QAAQ,CAACuB,IAAI,CAACC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;IAC5D,CAAC,CAAC;IAEFjB,QAAQ,CAACa,EAAE,CAAC,iBAAiB,EAAE,MAAM;MACnCrB,QAAQ,CAAC0B,MAAM,CAACF,QAAQ,EAAE,MAAM,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;MAC7DzB,QAAQ,CAAC0B,MAAM,CAACF,QAAQ,EAAE,KAAK,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;IAC9D,CAAC,CAAC;EACJ;EAEAA,eAAe,GAAGA,CAAA,KAAM;IACtB,IAAI,CAACX,UAAU,CAACa,KAAK,CAAC,CAAC;EACzB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,gBAAgBA,CAAA,EAAG;IAEjB,MAAMC,SAAS,GAAG,IAAI,CAACd,cAAc,CAACe,gBAAgB,CAAC,CAAC;;IAExD;IACA,IAAI,CAACD,SAAS,EAAE;MACd;IACF;IAEA,MAAME,IAAI,GAAG,IAAI,CAACf,gBAAgB,CAACG,GAAG,CAACU,SAAS,CAAC;;IAEjD;IACA,IAAI,CAACE,IAAI,EAAE;MACT;IACF;IAEA,MAAMC,SAAS,GAAG,IAAI,CAACZ,SAAS,CAACa,YAAY,CAAC,CAAC;IAE/C,MAAMC,IAAI,GAAGhC,WAAW,CAAC2B,SAAS,EAAEG,SAAS,CAAC;IAE9C,MAAMG,aAAa,GAAGlC,gBAAgB,CAACiC,IAAI,CAAC;;IAE5C;IACA;IACA,IAAIV,QAAQ,CAACY,aAAa,KAAKD,aAAa,EAAE;MAC5C;IACF;IAEA,MAAME,KAAK,GAAGvC,QAAQ,CAACoC,IAAI,CAAC;;IAE5B;IACA;IACA,IAAIG,KAAK,IAAKA,KAAK,CAACC,KAAK,KAAKD,KAAK,CAACE,GAAI,EAAE;MACxC;IACF;IAEA,OAAOR,IAAI;EACb;EAGAT,iBAAiB,GAAGA,CAAA,KAAM;IAExB;IACA;IACA,MAAMkB,IAAI,GAAGA,CAACC,GAAG,EAAEC,SAAS,KAAK;MAE/B,IAAIvC,KAAK,CAACuC,SAAS,CAAC,IAAKD,GAAG,KAAK,EAAG,EAAE;QACpC,MAAMV,IAAI,GAAG,IAAI,CAACH,gBAAgB,CAAC,CAAC;QAEpC,IAAI,CAACG,IAAI,EAAE;UACT;QACF;QAEA,IAAI3B,OAAO,CAACsC,SAAS,CAAC,EAAE;UACtB,IAAI,CAACzB,cAAc,CAAC0B,OAAO,CAAC,MAAM,EAAE;YAClCC,OAAO,EAAEb,IAAI,CAACc;UAChB,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,IAAI,CAAC5B,cAAc,CAAC0B,OAAO,CAAC,MAAM,EAAE;YAClCC,OAAO,EAAEb,IAAI,CAACe;UAChB,CAAC,CAAC;QACJ;QAEA,OAAO,IAAI;MACb;IACF,CAAC;;IAED;IACA;IACA,MAAMC,GAAG,GAAGA,CAACN,GAAG,EAAEC,SAAS,KAAK;MAE9B,IAAIvC,KAAK,CAACuC,SAAS,CAAC,IAAKD,GAAG,KAAK,EAAG,EAAE;QAEpC,MAAMV,IAAI,GAAG,IAAI,CAACH,gBAAgB,CAAC,CAAC;QAEpC,IAAI,CAACG,IAAI,EAAE;UACT;QACF;QAEA,IAAI3B,OAAO,CAACsC,SAAS,CAAC,EAAE;UACtB,IAAI,CAACzB,cAAc,CAAC0B,OAAO,CAAC,KAAK,EAAE;YACjCC,OAAO,EAAEb,IAAI,CAACc;UAChB,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,IAAI,CAAC5B,cAAc,CAAC0B,OAAO,CAAC,KAAK,EAAE;YACjCC,OAAO,EAAEb,IAAI,CAACe;UAChB,CAAC,CAAC;QACJ;QAEA,OAAO,IAAI;MACb;IACF,CAAC;;IAED;IACA;IACA,MAAME,KAAK,GAAGA,CAACP,GAAG,EAAEC,SAAS,KAAK;MAEhC,IAAIO,MAAM;MAEV,IAAI9C,KAAK,CAACuC,SAAS,CAAC,IAAKD,GAAG,KAAK,EAAG,EAAE;QAEpC,MAAMV,IAAI,GAAG,IAAI,CAACH,gBAAgB,CAAC,CAAC;QAEpC,IAAI,CAACG,IAAI,EAAE;UACT;QACF;QAEA,IAAI3B,OAAO,CAACsC,SAAS,CAAC,EAAE;UACtBO,MAAM,GAAG,IAAI,CAAChC,cAAc,CAAC0B,OAAO,CAAC,YAAY,EAAE;YACjDC,OAAO,EAAEb,IAAI,CAACc;UAChB,CAAC,CAAC;UAEF,IAAII,MAAM,EAAE;YACV,IAAI,CAAClC,cAAc,CAACmC,UAAU,CAAC,OAAO,CAAC;UACzC;QACF,CAAC,MAAM;UACLD,MAAM,GAAG,IAAI,CAAChC,cAAc,CAAC0B,OAAO,CAAC,YAAY,EAAE;YACjDC,OAAO,EAAEb,IAAI,CAACe;UAChB,CAAC,CAAC;UAEF,IAAIG,MAAM,EAAE;YACV,IAAI,CAAClC,cAAc,CAACmC,UAAU,CAAC,OAAO,CAAC;UACzC;QACF;MACF;;MAEA;MACA,OAAO,OAAOD,MAAM,KAAK,WAAW;IACtC,CAAC;;IAED;IACA,CAAET,IAAI,EAAEO,GAAG,EAAEC,KAAK,CAAE,CAACG,OAAO,CAAEC,CAAC,IAAK;MAClC,IAAI,CAAClC,SAAS,CAACmC,WAAW,CAACD,CAAC,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC;AAEH;AAGA/C,oBAAoB,CAACiD,OAAO,GAAG,CAC7B,UAAU,EACV,UAAU,EACV,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,eAAe,EACf,UAAU,CACX","ignoreList":[]}