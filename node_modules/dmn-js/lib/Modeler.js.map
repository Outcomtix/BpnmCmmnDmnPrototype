{"version":3,"file":"Modeler.js","names":["EditingManager","DrdModeler","DecisionTableEditor","LiteralExpressionEditor","Editor","BoxedExpressionEditor","is","getBoxedExpression","containsDi","find","Modeler","_getViewProviders","id","constructor","opens","element","decisionLogic","_getInitialView","views","rest","initialView","view"],"sources":["../src/Modeler.js"],"sourcesContent":["import EditingManager from 'dmn-js-shared/lib/base/EditingManager';\n\nimport DrdModeler from 'dmn-js-drd/lib/Modeler';\nimport DecisionTableEditor from 'dmn-js-decision-table/lib/Editor';\nimport LiteralExpressionEditor from 'dmn-js-literal-expression/lib/Editor';\nimport { Editor as BoxedExpressionEditor } from 'dmn-js-boxed-expression';\n\nimport { is, getBoxedExpression } from 'dmn-js-shared/lib/util/ModelUtil';\nimport { containsDi } from 'dmn-js-shared/lib/util/DiUtil';\n\nimport { find } from 'min-dash';\n\n\n/**\n * The dmn editor.\n */\nexport default class Modeler extends EditingManager {\n\n  _getViewProviders() {\n\n    return [\n      {\n        id: 'drd',\n        constructor: DrdModeler,\n        opens: 'dmn:Definitions'\n      },\n      {\n        id: 'decisionTable',\n        constructor: DecisionTableEditor,\n        opens(element) {\n          return (\n            is(element, 'dmn:Decision') &&\n            is(element.decisionLogic, 'dmn:DecisionTable')\n          );\n        }\n      },\n      {\n        id: 'literalExpression',\n        constructor: LiteralExpressionEditor,\n        opens(element) {\n          return (\n            is(element, 'dmn:Decision') &&\n            is(element.decisionLogic, 'dmn:LiteralExpression')\n          );\n        }\n      },\n      {\n        id: 'boxedExpression',\n        constructor: BoxedExpressionEditor,\n        opens(element) {\n          return (\n            is(element, 'dmn:BusinessKnowledgeModel') &&\n            getBoxedExpression(element)\n          );\n        }\n      }\n    ];\n\n  }\n\n  _getInitialView(views, ...rest) {\n    let initialView = super._getInitialView(views, ...rest);\n\n    if (!initialView) {\n      return;\n    }\n\n    const element = initialView.element;\n\n    // if initial view is definitions without DI, try to open another view\n    if (is(element, 'dmn:Definitions') && !containsDi(element)) {\n      initialView =\n        find(views, view => !is(view.element, 'dmn:Definitions')) || initialView;\n    }\n\n    return initialView;\n  }\n}\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,uCAAuC;AAElE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,uBAAuB,MAAM,sCAAsC;AAC1E,SAASC,MAAM,IAAIC,qBAAqB,QAAQ,yBAAyB;AAEzE,SAASC,EAAE,EAAEC,kBAAkB,QAAQ,kCAAkC;AACzE,SAASC,UAAU,QAAQ,+BAA+B;AAE1D,SAASC,IAAI,QAAQ,UAAU;;AAG/B;AACA;AACA;AACA,eAAe,MAAMC,OAAO,SAASV,cAAc,CAAC;EAElDW,iBAAiBA,CAAA,EAAG;IAElB,OAAO,CACL;MACEC,EAAE,EAAE,KAAK;MACTC,WAAW,EAAEZ,UAAU;MACvBa,KAAK,EAAE;IACT,CAAC,EACD;MACEF,EAAE,EAAE,eAAe;MACnBC,WAAW,EAAEX,mBAAmB;MAChCY,KAAKA,CAACC,OAAO,EAAE;QACb,OACET,EAAE,CAACS,OAAO,EAAE,cAAc,CAAC,IAC3BT,EAAE,CAACS,OAAO,CAACC,aAAa,EAAE,mBAAmB,CAAC;MAElD;IACF,CAAC,EACD;MACEJ,EAAE,EAAE,mBAAmB;MACvBC,WAAW,EAAEV,uBAAuB;MACpCW,KAAKA,CAACC,OAAO,EAAE;QACb,OACET,EAAE,CAACS,OAAO,EAAE,cAAc,CAAC,IAC3BT,EAAE,CAACS,OAAO,CAACC,aAAa,EAAE,uBAAuB,CAAC;MAEtD;IACF,CAAC,EACD;MACEJ,EAAE,EAAE,iBAAiB;MACrBC,WAAW,EAAER,qBAAqB;MAClCS,KAAKA,CAACC,OAAO,EAAE;QACb,OACET,EAAE,CAACS,OAAO,EAAE,4BAA4B,CAAC,IACzCR,kBAAkB,CAACQ,OAAO,CAAC;MAE/B;IACF,CAAC,CACF;EAEH;EAEAE,eAAeA,CAACC,KAAK,EAAE,GAAGC,IAAI,EAAE;IAC9B,IAAIC,WAAW,GAAG,KAAK,CAACH,eAAe,CAACC,KAAK,EAAE,GAAGC,IAAI,CAAC;IAEvD,IAAI,CAACC,WAAW,EAAE;MAChB;IACF;IAEA,MAAML,OAAO,GAAGK,WAAW,CAACL,OAAO;;IAEnC;IACA,IAAIT,EAAE,CAACS,OAAO,EAAE,iBAAiB,CAAC,IAAI,CAACP,UAAU,CAACO,OAAO,CAAC,EAAE;MAC1DK,WAAW,GACTX,IAAI,CAACS,KAAK,EAAEG,IAAI,IAAI,CAACf,EAAE,CAACe,IAAI,CAACN,OAAO,EAAE,iBAAiB,CAAC,CAAC,IAAIK,WAAW;IAC5E;IAEA,OAAOA,WAAW;EACpB;AACF","ignoreList":[]}